import { useState, useEffect } from "react";
import { useRouter } from "next/router";

const API_URL = `http://localhost:5000/join`;
const GOOGLE_CLIENT_ID = "915221657350-h1fgp2gn4c2tpcfdnve3agtv32sihdva.apps.googleusercontent.com";
const GOOGLE_REDIRECT_URI = "http://localhost:3000/login";

export default function LoginPage() {
  const [name, setName] = useState("");
  const [loading, setLoading] = useState(false);
  const router = useRouter();

  useEffect(() => {
    console.log("üîπ Current URL:", window.location.href); // Debugging
    
    const hash = window.location.hash.substring(1); // Remove #
    console.log("üîπ Extracted Hash:", hash); // Debugging
  
    const params = new URLSearchParams(hash);
    const accessToken = params.get("access_token");
  
    console.log("üîπ Extracted Access Token:", accessToken); // Debugging
  
    if (accessToken) {
      localStorage.setItem("access_token", accessToken);
      fetchGoogleUserInfo(accessToken);
    }
  }, []);
  
  

  const fetchGoogleUserInfo = async (token: string) => {
    try {
      const res = await fetch("https://www.googleapis.com/oauth2/v2/userinfo", {
        headers: { Authorization: `Bearer ${token}` },
      });
      if (!res.ok) {
        throw new Error("Failed to fetch user info");
      }
      const data = await res.json();
      console.log("Google User Info:", data); // Debugging

      if (data.name) {
        setName(data.name);
        localStorage.setItem("user", data.name); // Store name in localStorage
        handleLogin(data.name); // Proceed to login
      }
    } catch (error) {
      console.error("‚ùå Failed to fetch Google user info:", error);
    }
  };

  const handleGoogleAuth = () => {
    const oauthURL = `https://accounts.google.com/o/oauth2/v2/auth
  ?client_id=${GOOGLE_CLIENT_ID}
  &redirect_uri=${encodeURIComponent(GOOGLE_REDIRECT_URI)}
  &response_type=token
  &scope=https://www.googleapis.com/auth/userinfo.profile
  &include_granted_scopes=true
  &prompt=select_account`
  .replace(/\s+/g, ""); // Remove any accidental spaces

window.location.href = oauthURL;


  };

  const handleLogin = async (username: string) => {
    if (!username.trim()) {
      alert("Please enter a name!");
      return;
    }
  
    setLoading(true);
  
    try {
      const res = await fetch(API_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username: username }),
      });
  
      const text = await res.text(); // Read response as text first
      console.log("üîπ Raw API Response:", text); // Debugging
  
      if (!res.ok) {
        throw new Error(`Login failed: ${res.status} - ${text}`);
      }
  
      try {
        const data = JSON.parse(text); // Attempt to parse JSON
        console.log("üîπ Parsed API Response:", data);
  
        if (data.uuid) {
          localStorage.setItem("uuid", data.uuid);
          localStorage.setItem("user", username);
          console.log("‚úÖ Name stored in localStorage:", username);
  
          alert("‚úÖ Login successful!");
          router.push("/");
        } else {
          console.error("‚ùå No UUID returned in API response.");
        }
      } catch (jsonError) {
        console.error("‚ùå JSON Parsing Failed:", jsonError, "Response:", text);
      }
    } catch (error) {
      console.error("‚ùå Login failed:", error);
    } finally {
      setLoading(false);
    }
  };
  
  

  return (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500">
      <div className="bg-white/10 backdrop-blur-lg p-8 rounded-2xl shadow-lg max-w-md w-full text-center border border-white/20">
        <h1 className="text-3xl font-bold text-white mb-6">Login as Anonymous</h1>
        <input
          type="text"
          className="w-full p-3 rounded-lg bg-white/20 text-white placeholder-gray-300 focus:outline-none focus:ring-2 focus:ring-white"
          placeholder="Enter your name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <button
          className="w-full mt-4 p-3 bg-white text-indigo-600 font-bold rounded-lg hover:bg-gray-100 transition disabled:opacity-50 flex items-center justify-center"
          onClick={() => handleLogin(name)}
          disabled={loading}
        >
          {loading ? (
            <span className="animate-spin border-2 border-indigo-600 border-t-transparent rounded-full w-5 h-5"></span>
          ) : (
            "Login"
          )}
        </button>
        <button
          onClick={handleGoogleAuth}
          className="w-full mt-4 p-3 bg-white text-gray-700 font-bold rounded-lg border border-gray-300 hover:bg-gray-100 transition flex items-center justify-center"
        >
          <img
            src="https://upload.wikimedia.org/wikipedia/commons/4/4a/Google_2015_logo.svg"
            alt="Google Logo"
            className="w-5 h-5 mr-2"
          />
          Sign in with Google
        </button>
      </div>
    </div>
  );
}